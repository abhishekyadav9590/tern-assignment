import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import {baseURL} from "../config/constants";
import axiosInterceptor from "../utlis/axiosInterceptor";

interface JobState {
    data: object,
    loading: boolean,
    error: string
}


const initialState: JobState = {
    data:{},
    loading:false,
    error:''
}


export const fetchJobsAsync = createAsyncThunk(
    'jobs/fetchJobs',
    async (params:any) => {
        const api = `${baseURL}?category=${params.searched}&page=${params.page}`
        const jobs = await axiosInterceptor.get(api);
        console.log('I am here.......')
        return jobs.data;
    }
);

export const jobSlice = createSlice({
    name: 'jobs',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        updateJobs: (state, action) => {
            state.data = action.payload;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchJobsAsync.pending, (state) => {
                state.loading = true;
                state.data = {}
            })
            .addCase(fetchJobsAsync.fulfilled, (state, action) => {
                state.loading = false;
                if (action.payload !== undefined && action.payload.results.length) {
                    state.data = action.payload;
                }
            })
            .addCase(fetchJobsAsync.rejected, (state, action) => {
                state.loading = false;
                state.error = action.error.message || "";
            });
    },
});


// export const {  } = jobSlice.actions;
export default jobSlice.reducer;